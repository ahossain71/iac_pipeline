---
- hosts: "localhost"
  connection: local
  become: false
  gather_facts: true  
 
  tasks:
    - name : Execute script
      command: 'ansible -i /etc/ansible/ec2.py tag_Name_tomcat-node* --list'
      register: result

    - set_fact:
        #target_hosts: "{{ result.stdout | reject('search','host') | list }}" (\\.(?!$)|$)){4}$')
        target_hosts: "{{ result.stdout_lines | list }}"
      register: target_hosts

    #- debug: msg="{{ item }}"
    #  with_items: "{{ target_hosts }}"

    - debug:
        var: target_hosts.ansible_facts.target_hosts

    #- name: splitting stdout to make an ansible list of hosts
    #  set_fact:
    #    hostlist: target_hosts.split('\n')
    #  register: hostlist

    #- debug:
    #    var: "{{hostlist[0]}}"

    #-debug: msg="{{ item.stdout_lines }}"
    #  with_items: "{{ result }}"
     #loop_control:
     #label: '...' 

  

    # - name: craeting a list of IP Addresses only from the hostlist variable
    #  set_fact:
    #    target_hosts: "{{ hostlist | select('search','^[0-9]') | list }}"
    #  register: target_hosts

    #- debug:
    #    var: target_hosts

    #- name: Update the /etc/hosts file with node name
    #  tags: etchostsupdate
    #  become: yes
    #  become_user: "root"
    #  lineinfile:
    #    path: "/etc/ansible/hosts"
    #    regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
    #    line: "{{ hostvars[item]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
    #    state: present
    #    backup: no
    #  register: etchostsupdate
    #  when: ansible_hostname != "{{ item }}" or ansible_hostname == "{{ item }}"
    #  with_items: "{{groups['tomcatnodes']}}"

    #- debug:
    #  var: etchostsupdate
